/* parentnode.append polyfill */
// Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/append()/append().md
(function (arr) {
    arr.forEach(function (item) {
      if (item.hasOwnProperty('append')) {
        return;
      }
      Object.defineProperty(item, 'append', {
        configurable: true,
        enumerable: true,
        writable: true,
        value: function append() {
          var argArr = Array.prototype.slice.call(arguments),
            docFrag = document.createDocumentFragment();

          argArr.forEach(function (argItem) {
            var isNode = argItem instanceof Node;
            docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
          });

          this.appendChild(docFrag);
        }
      });
    });
})([Element.prototype, Document.prototype, DocumentFragment.prototype]);

//object.assign polyfill
if (typeof Object.assign != 'function') {
    // Must be writable: true, enumerable: false, configurable: true
    Object.defineProperty(Object, "assign", {
        value: function assign(target, varArgs) { // .length of function is 2
        'use strict';
        if (target == null) { // TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var to = Object(target);

        for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource != null) { // Skip over if undefined or null
            for (var nextKey in nextSource) {
                // Avoid bugs when hasOwnProperty is shadowed
                if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                to[nextKey] = nextSource[nextKey];
                }
            }
            }
        }
            return to;
        },
        writable: true,
        configurable: true
    });
};


var com = com || {};
com.TI = com.TI || {};
com.TI.promo = com.TI.promo || {};

com.TI.promo.PromoImage = function(promoId, href, linkName, imgSrc, html, impressionId, promoType) {
    this.promoId = promoId;
    this.href = href;
    this.linkName = linkName;
    this.imgSrc = imgSrc;
    this.html = html;
    if (impressionId) this.impressionId = impressionId;
    if (promoType) this.promoType = promoType;
};

com.TI.promo.Carousel = function (userOptions, resourceText) {
    var _this = this;
    const FADESPEED = '.4s'; // fadeout and fade in speeds
    const FADEWAIT = 251; // fade wait for fadespeed transition before reversing

    this.advanceCarousel = function (dir, bPreload) {
        dir = (typeof dir == 'undefined') ? 1 : dir;
        var nextIndicatorIndex;
        if ((dir > 0)) {
            nextIndicatorIndex = _this.currentIndicatorIndex + 1;
            if (nextIndicatorIndex >= this.options.indicatorViewportCount)
                nextIndicatorIndex = 0;
        } else if (dir < 0) {
            nextIndicatorIndex = _this.currentIndicatorIndex - 1;
            if (nextIndicatorIndex < 0)
                nextIndicatorIndex = this.options.indicatorViewportCount - 1;
        }
        showLargerImage(nextIndicatorIndex, dir, bPreload);
    };

    this.indexOf = function (imgObj) {
        if (!imgObj) {
            return -1
        }
        var len = imagesCount();
        for (var i = 0; i < len; i++) {
            if (imgObj.promoId == _this.options.additionalImages[i].promoId) {
                return i
            }
        }
        return -1
    };

    this.stopCarousel = function () {
        try {
            window.clearInterval(_this.indicatorWindowIntervalTimerHandler);
            _this.indicatorWindowIntervalTimerHandler = null
        } catch (e) {}
    };

    this.startCarousel = function () {
        _this.stopCarousel();  // just to be sure
        _this.inMouseOverEvent = false;
        _this.indicatorWindowIntervalTimerHandler = window.setInterval(function () {
            _this.advanceCarousel(1, false)
        }, _this.options.transitionTimeout);
    };

    this.defaultOptions = {
        selector : '#tiSlider',
        additionalImages : null,
        existingPromoLink : null,
        existingPromoImage : null,
        transitionTimeout : 10000,
        fadeTransitionSpeed : 125,
        startPosition : 0,
        controlPrevHtml : '',
        controlNextHtml : '',
        indicatorViewportCount: 0,
        imageLoaderDivId : 'slider-images-loader',
        indicatorNavCssClass : 'thumbNav',
        loadingImageSrc : 'images/loading.gif',
        isEmergency : false
    };

    _this.indicatorWindowIntervalTimerHandler = null;
    _this.deferredBannerLoadingTimeoutHandler = null;
    _this.inMouseOverEvent = false;

    userOptions = userOptions || {};
    resourceText = resourceText || {};
    this.options = Object.assign(this.defaultOptions, userOptions); // investigate deep merge issues if any
    if (userOptions && userOptions.existingPromoImage) {
        var sImage = new com.TI.promo.PromoImage();
        sImage.imgSrc = document.querySelector(userOptions.existingPromoImage).attr('src');
        sImage.linkName = document.querySelector(userOptions.existingPromoLink).attr('name');
        sImage.href = document.querySelector(userOptions.existingPromoLink).attr('href');
        this.options.additionalImages.splice(0, 0, sImage)
    }

    _this.currentIndicatorIndex = 0;

    var indicatorViewModel = [],
    additionalImages = this.options.additionalImages,
    imagesCount = function () {
        return (_this.options.additionalImages || []).length
    },
    carousel = document.querySelector(this.options.selector),
    imageLoadingIntervalHandler = null,
    impressionsSentFor = [],
    resourceTextObject = {
        loading : 'Loading...'
    },
    buildIndicatorViewModel = function (startPos, updateUICallback, dir) {
        var imgCount = imagesCount(),
        indicatorViewportSize = imgCount || _this.options.indicatorViewportCount;
        endPos = indicatorViewportSize,
        supplementalAdditions = [],
        dir = dir || 1;
        startPos = typeof startPos == 'undefined' ? 0 : startPos;
        if (dir > 0) {
            if (_this.currentIndicatorIndex + 1 >= indicatorViewportSize) {
                _this.currentIndicatorIndex = 0;
                indicatorViewModel = []
            }
        } else if (dir < 0) {
            if (_this.currentIndicatorIndex - 1 < 0) {
                _this.currentIndicatorIndex = indicatorViewportSize - 1;
                indicatorViewModel = []
            }
        }
        if (indicatorViewModel.length == 0) {
            startPos = (startPos >= imgCount) ? 0 : startPos;
            startPos = (startPos < 0) ? 0 : startPos;
            if ((startPos + indicatorViewportSize) >= imgCount) {
                endPos = imgCount;
                var o = (startPos + indicatorViewportSize) - imgCount;
                for (var i = 0; i < o; i++) {
                    supplementalAdditions.push(_this.options.additionalImages[i])
                }
            } else {
                endPos = (startPos + indicatorViewportSize)
            }
            for (var i = startPos; i < endPos; i++) {
                indicatorViewModel.push(_this.options.additionalImages[i])
            }
            indicatorViewModel = indicatorViewModel.concat(supplementalAdditions);
            try {
                if (updateUICallback && typeof(updateUICallback) == 'function') {
                    updateUICallback.call(this, indicatorViewModel)
                }
            } catch (e) {}

        }
    },
    createIndicators = function (model, addHighlight) {
        var indicators = carousel.querySelector('.indicators');
        indicators.innerHTML = '';
        for (var i = 0; i < model.length; i++) {
            var thumb = document.createElement("a");
            //thumb.setAttribute("href", '#' + model[i].href);
            thumb.setAttribute("class", ((_this.currentIndicatorIndex == i && addHighlight === true) ? 'is-active' : ''));
            thumb.setAttribute("name", model[i].linkName);
            thumb.setAttribute("cIndex", i);

            thumb.addEventListener('click', function (e) {
                var t = e.target,
                href = t.getAttribute('href'),
                name = t.getAttribute('name'),
                elementIndex = t.getAttribute('cIndex');
                elementIndex = (parseInt(elementIndex) !== NaN) ? parseInt(elementIndex) : 0;
                var imgObj = indicatorViewModel[elementIndex];
                if (imgObj)
                    showLargerImage(elementIndex, 1, false);

                return false;
            });

            indicators.appendChild(thumb);
        }
        _this.options.indicatorViewportCount = model.length;
    },
    showLargerImage = function (indicatorIndex, dir, bPreload) {
        if (indicatorIndex == null)
            indicatorIndex = _this.currentIndicatorIndex;
        var img = indicatorViewModel[indicatorIndex],
        largerImage = carousel.querySelector('.js-carousel'),
        loadingDiv = carousel.querySelector('.js-carousel-loading'),
        impressionType = "impression";

        window.clearInterval(imageLoadingIntervalHandler);
        loadingDiv.setAttribute('style', 'display: none;');
        //largerImage.setAttribute('style', 'opacity: 0; transition: opacity ' + FADESPEED + ' linear;');
        var newNode = largerImage.children[indicatorIndex];
        if (newNode) {
            // Preloading: start loading the images for this banner (but only need to do this once per banner)
            if (!newNode.preloaded) {
                newNode.innerHTML = newNode.innerHTML.replace("data-src","src");
                if (newNode.getAttribute("data-style") != null) {
                    newNode.setAttribute("style", newNode.getAttribute("style") + newNode.getAttribute("data-style"));
                    newNode.removeAttribute("data-style");
                }
                newNode.preloaded = true;
            }
            // If in preload mode, no need to perform the remaining tasks
            if (!bPreload) {
                // Defer showing the new banner until its image(s) are loaded
                var bkgdImg, psImg;
                if (!newNode.loaded) {
                    bkimgsrc = newNode.querySelector(".ti_p-carouselBanner-image.mod-large");
                    bkgdImg = new Image();
                    bkgdImg.src = bkimgsrc.style.backgroundImage.slice(4, -1).replace(/['"]/g, "");
                    psImg = newNode.querySelector(".ti-carousel-productshot img");
                }
                (function checkImagesLoaded(iter) {
                    window.clearTimeout(_this.deferredBannerLoadingTimeoutHandler);
                    if (newNode.loaded || (bkgdImg.complete && (psImg == null || psImg.complete))) {
                        newNode.loaded = true;
                           newNode.style.zIndex = 1;
                           newNode.style.opacity = 1;

                           // If moving backwards, don't show animation wait for the banner to appear (only show animation wait for the PREVIOUS banner to hide)
                           if (indicatorIndex < _this.currentIndicatorIndex) {
                               newNode.style.transition = "opacity 0s";
                            Array.prototype.slice.call(largerImage.children).forEach(function(node) {
                                if (node != newNode) {
                                    node.style.transition = "opacity 200ms cubic-bezier(0.4, 0, 0.2, 1)";
                                    node.style.opacity = 0;
                                }
                            });
                           }
                           else
                               newNode.style.transition = "opacity 200ms cubic-bezier(0.4, 0, 0.2, 1)";

                        _this.currentIndicatorIndex = indicatorIndex;
                        setTimeout(function () {
                            // Hide the other banners during downtime
                            Array.prototype.slice.call(largerImage.children).forEach(function(node) {
                                if (node != newNode) {
                                    node.style.opacity = 0;
                                    node.style.zIndex = -1;
                                }
                            });

                            // Preload the next banner after showing the current banner
                            _this.advanceCarousel(dir, true);
                        }, _this.options.fadeTransitionSpeed);

                        var thumbLinks = carousel.querySelectorAll('.indicators a');
                        if (thumbLinks.length > 0) {
                            var curThumb = carousel.querySelector('.indicators a.is-active');
                            if (curThumb) { curThumb.className = curThumb.className.replace(/\bis-active\b/g, ""); }
                            thumbLinks[_this.currentIndicatorIndex].className += 'is-active';
                        }
                        setTimeout(function(){sendImpressionMetric(img, impressionType, _this.currentIndicatorIndex + 1); }, 100);
                    }
                    else {
                        // if not loaded yet, poll every 0.1 s up to 10 seconds
                        if (iter++ < 100)
                            _this.deferredBannerLoadingTimeoutHandler = setTimeout(checkImagesLoaded, 100, iter);
                    }
                })(0);
            }
        }
    },
    sendImpressionMetric = function (img, impressionType, indicatorIndex) {
            // track the impression
        function checkForAnalyticsTrack(retryCount, maxRetryCount, waitMilliSeconds) {
            // track the impression
            if (typeof _tiAnalyticsTrack !== "undefined") {
                if ((impressionsSentFor.indexOf(img.impressionId) == -1) && (impressionType == "impression")) {
                    _tiAnalyticsTrack("homepage promo", impressionType, img.impressionId, indicatorIndex)
                    impressionsSentFor.push(img.impressionId);
                    console.log("type: " + impressionType + "------img.impressionId: " + img.impressionId + "----------indicatorIndex: " + indicatorIndex);
                    }
                if (impressionType == "click") {
                    _tiAnalyticsTrack("homepage promo", impressionType, img.impressionId, indicatorIndex);
                    console.log("type: " + impressionType + "------img.impressionId: " + img.impressionId + "----------indicatorIndex: " + indicatorIndex);
                }
            } else {
            if (retryCount <= maxRetryCount) {
                retryCount++;
                setTimeout(function () {
                    checkForAnalyticsTrack(retryCount, maxRetryCount, waitMilliSeconds);
                    }, waitMilliSeconds);
                }
            }
        }
        checkForAnalyticsTrack(0, 4, 1000);

    };
    resourceTextObject = Object.assign(resourceTextObject, resourceText);

    if (this.options.additionalImages) {
        var startingImg = this.options.additionalImages[this.options.startPosition];
        //carousel.innerHTML = '<div class="js-carousel-loading"><img src="' + this.options.loadingImageSrc + '" alt="" /><span>' + resourceTextObject.loading + '</span></div><div class="js-carousel"><a href="' + startingImg.href + '" name="' + startingImg.linkName + '"><img src="' + startingImg.imgSrc + '" alt="" /></a></div><div class="control-prev">' + this.options.controlPrevHtml + '</div><div class="control-next">' + this.options.controlNextHtml + '</div><div class="indicator-container"><div class="indicators ' + this.options.indicatorNavCssClass + '"></div></div>';
        //carousel.innerHTML = '<div class="js-carousel-loading"><img src="' + this.options.loadingImageSrc + '" alt="" /><span>' + resourceTextObject.loading + '</span></div><div class="js-carousel">' + startingImg.html + '</div><div class="control-prev">' + this.options.controlPrevHtml + '</div><div class="control-next">' + this.options.controlNextHtml + '</div><div class="indicator-container"><div class="indicators ' + this.options.indicatorNavCssClass + '"></div></div>';
        var sliderPromoDiv = carousel.querySelector('.js-carousel');
        if (sliderPromoDiv == null) return;

        carousel.style.display = "block";

        // showLargerImage not called for first image, need send impression metrics manually
        sendImpressionMetric(startingImg, "impression" ,1);

        // Send impression metrics when banner is clicked
        sliderPromoDiv.addEventListener('mousedown', function () {
            var currentImg = _this.options.additionalImages[_this.currentIndicatorIndex];
            sendImpressionMetric(currentImg, "click" , _this.currentIndicatorIndex + 1);
        });

        if (this.options.isEmergency) {
            carousel.querySelector('.control-next').setAttribute('style', 'display: none;');;
            carousel.querySelector('.control-prev').setAttribute('style', 'display: none;');;
            carousel.querySelector('.indicator-container').setAttribute('style', 'display: none;');;
        } else {
            carousel.addEventListener('mouseover', function () {
                _this.inMouseOverEvent = true;
                _this.stopCarousel()
            });
            carousel.addEventListener('mouseout', function () {
                _this.startCarousel()
            });

            carousel.querySelector('.control-next').addEventListener('click', function () {
                _this.advanceCarousel(1, false)
            });
            carousel.querySelector('.control-prev').addEventListener('click', function () {
                _this.advanceCarousel(-1, false)
            });
            buildIndicatorViewModel(this.options.startPosition, function (model) {
                createIndicators(model, true)
            });
            _this.startCarousel();

            // Manually preload the first (next) banner, 5 seconds after the homepage loads
            setTimeout(function () {
                _this.advanceCarousel(1, true);
            }, 5000);
        };
    };
};

var com = com || {};
com.TI = com.TI || {};
com.TI.promo = com.TI.promo || {};

com.TI.promo.util = function () {
    const REGIONMAP = {
        "www.ti.com": {lang: "en", locale: "en_US"},
        "www-int.itg.ti.com": {lang: "en", locale: "en_US"},
        "www-uat.itg.ti.com": {lang: "en", locale: "en_US"},
        "www-sat.itg.ti.com": {lang: "en", locale: "en_US"},
        "www.ti.com.cn": {lang: "cn", locale: "zh_CN"},
        "www-cn-int.itg.ti.com": {lang: "cn", locale: "zh_CN"},
        "www-cn-uat.itg.ti.com": {lang: "cn", locale: "zh_CN"},
        "www-cn-sat.itg.ti.com": {lang: "cn", locale: "zh_CN"}
    };

    this.loadJSON = function(path, success, error) {
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function(){
            if (xhr.readyState === XMLHttpRequest.DONE || xhr.readyState === 4) {
                if (xhr.status === 200) {
                    if (success)
                        success(JSON.parse(xhr.responseText));
                } else {
                    if (error)
                        error(xhr);
                }
            }
        };
        xhr.open("GET", path, true);
        xhr.send();
    };

    this.getLanguage = function(host) {
        host = host.toLowerCase();
        var pathname = location.pathname.toLowerCase();

        if (!REGIONMAP.hasOwnProperty(host)) return "en";
        if (/\/jp/.test(pathname)) return "jp";
        if ((/^\/lsds\/ti_ko\//.test(pathname)) || (/\/kr/.test(pathname))) return "kr";
        if ((/^\/lsds\/ti_de\//.test(pathname)) || (/\/de/.test(pathname))) return "de";

        return REGIONMAP[host].lang;
    };

    this.getRegion = function(host) {
        host = host.toLowerCase();
        var pathname = location.pathname.toLowerCase();

        if (!REGIONMAP.hasOwnProperty(host)) return "en_US";
        if (/\/jp/.test(pathname)) return "ja_JP";
        if ((/^\/lsds\/ti_ko\//.test(pathname)) || (/\/kr/.test(pathname))) return "ko_KR";
        if ((/^\/lsds\/ti_de\//.test(pathname)) || (/\/de/.test(pathname))) return "de_DE";
        return REGIONMAP[host].locale;
    };
};

//page ready
com.TI.promo.Banner = new function() {

    const util = new com.TI.promo.util();
    const PROMOTYPE_OT = 1;
    const PROMOTYPE_PP = 3;
    const MAX_NUM_OF_PROMOS = 4;
    const RESSTRINGS = {
        loading: 'loading...'
    };
    const separator = ".js-carousel-slide";

    function fallbackData(locale) {

        locale = (locale == 'ja_JP' || locale == 'zh_CN' ? locale : 'default');

        const localeMap = {
            'ja_JP':[{
                "promoId": '-1',
                "promoUrl": 'http://www.ti.com/pmp-webenchexport-bhp-en',
                "graphicPath": 'http://www.ti.com/assets/jp/images/homepage/Webench-SVA_HP-promo-jp-lg.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/jp/images/homepage/Webench-SVA_HP-promo-jp-sm.jpg',
                "promoTypeId": 3
                },
                {
                "promoId": '-2',
                "promoUrl": 'http://www.ti.com/pmp-webenchexport-bhp-en',
                "graphicPath": 'http://www.ti.com/assets/jp/images/homepage/16936_marcom_apps_lg_jp.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/jp/images/homepage/16936_marcom_apps_sm_jp.jpg',
                "promoTypeId": 3
                }],
            'zh_CN':[{
                "promoId": '-1',
                "promoUrl": 'http://www.ti.com/pmp-webenchexport-bhp-en',
                "graphicPath": 'http://www.ti.com/assets/cn/images/homepage/15683_webenchexport_lg-cn.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/cn/images/homepage/15683_webenchexport_sm-cn.jpg',
                "promoTypeId": 3
                },
                {
                "promoId": '-2',
                "promoUrl": 'http://www.ti.com/pmp-webenchexport-bhp-en',
                "graphicPath": 'http://www.ti.com/assets/cn/images/homepage/16832_Webench_lg_cn.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/cn/images/homepage/16832_Webench_sm_cn.jpg',
                "promoTypeId": 3
                }],
            'default':[{
                "promoId": '-1',
                "promoUrl": 'http://www.ti.com/ccr2012-ticom ',
                "graphicPath": 'http://www.ti.com/assets/en/images/homepage/17379_ccr2012_hp_banner_lg_en.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/en/images/homepage/17379_ccr2012_hp_banner_sm_en.jpg',
                "promoTypeId": 3
                },
                {
                "promoId": '-2',
                "promoUrl": 'http://www.ti.com/pmp-webenchexport-bhp-en',
                "graphicPath": 'http://www.ti.com/assets/en/images/homepage/15683_webenchexport_lg_en.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/en/images/homepage/15683_webenchexport_sm_en.jpg',
                "promoTypeId": 3
                },
                {
                "promoId": '-3',
                "promoUrl": 'http://www.ti.com/univ-blog-bhp-en',
                "graphicPath": 'http://www.ti.com/assets/en/images/homepage/16335_univ_blog_lg_en.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/en/images/homepage/16335_univ_blog_sm_en.jpg',
                "promoTypeId": 3
                },
                {
                "promoId": '-4',
                "promoUrl": 'http://www.ti.com/ti-mobile-bhp',
                "graphicPath": 'http://www.ti.com/assets/en/images/homepage/16936_marcom_apps_lg_en.jpg',
                "thumbnailPath": 'http://www.ti.com/assets/en/images/homepage/16936_marcom_apps_sm_en.jpg',
                "promoTypeId": 3
                }]
            }

            return localeMap[locale];
        };


    var langId = util.getLanguage(location.host),
        regionId = util.getRegion(location.host),
        serviceRegion = (langId != 'en') ? langId + '/' : '',
        defaultDataUrl = "/assets/system-promos/gen/promos_" + langId + ".json";

    /**
     * Used by useDefaultImages instead of parsePromoData because
     * the static data is in a slightly different structure
     */
    function parseStaticPromoData(result) {
        if (typeof result !== 'object') {
            //console.log('result was not an object');
            return false;
        }

        var promos = [];
        // translate results into an array that we can sort
        for (var prop in result) {
            promos.push(result[prop]);
        }
        // sort
        // assuming sortOrder property is numeric
        // and that it actually exists for all items
        promos = promos.sort(function(a, b) {
            return parseInt(a.sortOrder) - parseInt(b.sortOrder);
        });

        //console.log(promos);

        // add the items to the array
        initSlider(getPromosArray(promos));

        return true;
    }

    this.parsePromoData = function(result) {
        var promos = result.querySelectorAll(separator),
            isEmergency = false;

        initSlider(getPromosArray(promos, parseInt(result.dataset.max) || MAX_NUM_OF_PROMOS), isEmergency);

        return true;
    }

    function getPromosArray(promos, maxLength) {
        var tmp = [],
            i = 0,
            len = promos.length,
            promoListForMetrics = [],
            util = new com.TI.promo.util(),
            langId = util.getLanguage(location.host);
        for (i = 0; i < len; i++) {
            // Initially, only the first banner should be visible, hide all others
            if (i == 0) {
                promos[i].innerHTML = promos[i].innerHTML.replace("data-src","src");
                promos[i].preloaded = true;
                promos[i].loaded = true;
            }
            else {
                promos[i].setAttribute("data-style", promos[i].getAttribute("style"));
                promos[i].removeAttribute("style");
                promos[i].style.opacity = 0;
                promos[i].style.zIndex = -1;
            }

            if (promos[i] != null) {
                var contentHtml = promos[i].outerHTML.trim();
                var promoId = promos[i].getAttribute("data-lid");
                if (promoId == null || promoId == "")
                    promoId = 'promo_hb_mm' + langId + '_' + (i+1);

                //gulpReplacedLangString('longtail_promo_poc_code');

                var promoUrl = " ",
                    promoText = '&lid=' + promoId,
                    graphicPath = " ",
                    impressionId = promoId,
                promoType = 0;
                if (promoUrl && promoText) {
                    tmp.push(new com.TI.promo.PromoImage(
                        promoId, // the unique id of the promo
                        promoUrl, // href
                        promoText, // linkId
                        graphicPath, // imgSrc
                        contentHtml, //html
                        impressionId,
                        promoType
                    ));
                }
            }
        }

        // TODO think of a better place to put this
        // update the global promo ID
        // if (!window.homePagePromoIDCount) window.homePagePromoIDCount = '';
        // homePagePromoIDCount = promoListForMetrics.join(':');
        // sethomePagePromoId(homePagePromoIDCount);
        // ClearVars();

        if (tmp.length > maxLength) {
            var sliced = [];
            for (var i=0; i<maxLength; i++) {
                sliced[i]=tmp[i];
            }
            tmp = sliced;
        }

        return tmp;
    }

    function initSlider(additionalImages, isEmergency) {
        //slider init
        var emergency = (typeof isEmergency != 'undefined') ? isEmergency : false;
        var options = {
            additionalImages: additionalImages,
            selector: '#homepage-carousel',
            transitionTimeout: 10000,
            loadingImageSrc: 'http://www.ti.com/assets/en/images/homepage/loading.gif',
            isEmergency: emergency
        };

        var sliders = document.querySelectorAll(options.selector);

        if (sliders.length > 0) {
            com.TI.promo.homepageBanners = new com.TI.promo.Carousel(options, RESSTRINGS);
        };
    }

    function initSliderWithFallbackData() {
        //console.log('using hardcoded fallback images');
        initSlider(getPromosArray(fallbackData(regionId)));
    }

    this.useDefaultImages = function() {
        util.loadJSON(defaultDataUrl, parseStaticPromoData, initSliderWithFallbackData)
    };
};


(function() {
    var util = new com.TI.promo.util();
    var langId = util.getLanguage(location.host),
        serviceRegion = (langId != 'en') ? langId + '/' : '';
        //promoServiceUrl = "/promo/" + serviceRegion + "docs/promotions/getpromodetails.tsp?locationId=2"
        //promoServiceUrl = $("#slider").data("url").replace("/homepagebanners","/homepagebanners.banners.html?wcmmode=disabled");

    // check for cookies
    if (typeof document.cookies !== 'string') {
        //console.log('we have cookies');
        // if cookies, try and get from service

        /*
        var s = document.createElement("script");
        s.src = promoServiceUrl + '&callback=com.TI.promo.Banner.parsePromoData';
        document.body.appendChild(s);
        */

        var data = document.querySelector("#homepage-carousel .js-carousel");
        if (data == null) return;

        if (!com.TI.promo.Banner.parsePromoData(data)) useDefaultImages();

        /*
        $.ajax({
            type: 'GET',
            timeout: 10000, //4000, changed for testsing
            url: promoServiceUrl,
            dataType: 'html',  // was jsonp
            //contentType: "text/plain",   //was javascript
            cache: false
        })
        .done(function(data, textStatus, jqXHR) {
            // console.log('jsonp done:');
            var worked = com.TI.promo.Banner.parsePromoData(data);
            // if (!worked) console.log('parse failed, going to default');
            //if (!worked) alert('parse webservice data failed, going to default data'); // added for testsing
            if (!worked) useDefaultImages();
        })
        .fail(function(jqXHR, textStatus) {
            // console.log('jsonp failed');
            //alert('webservice call failed, going to default data. status was ' + textStatus); // added for testsing
            useDefaultImages();
        })
        .always(function(data, textStatus, jqXHR) {
            // if (textStatus == 'parsererror')
            // console.log('jsonp always: came back ' + textStatus);
            // var worked = parsePromoData(data);
            // if (!worked) useDefaultImages();
        });
         */

    } else {
        //alert('no cookies, going to default data'); // added for testsing
        //console.log('no cookies');
        // no cookies, get the default json
        com.TI.promo.Banner.useDefaultImages();
    }

})();

function lazyloadVideo() {
    document.removeEventListener("scroll", lazyloadVideo);

    const video = document.getElementById("homepage-video");
    if (!video) return;
    video.style.display = "";
    const src = [
        "https://players.brightcove.net/",
        video.dataset.account,
        "/",
        video.dataset.player,
        "_default/index.min.js"
    ].join('');

    const script = document.createElement("script");
    script.setAttribute("charset","utf-8");
    script.setAttribute("defer","true");
    script.setAttribute("id","homepage-video-js");

    script.setAttribute("src", src);
    
    video.parentNode.insertBefore(script, video.nextSibling);
}

document.addEventListener("DOMContentLoaded", function() {
    document.addEventListener("scroll", lazyloadVideo);
});

